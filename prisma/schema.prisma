generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole   @default(USER)
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  member             Member?
  votes              Vote[]
  ideas              Idea[]
  comments           Comment[]
  payments           Payment[]

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Member {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("members")
}

model Category {
  id             String         @id @default(uuid())
  categoryStatus CategoryStatus @unique
  icon           String?
  ideas          Idea[]

  @@map("categories")
}

model Idea {
  id            String        @id @default(uuid())
  title         String
  categoryId    String
  authorId      String
  statement     String
  solution      String
  description   String
  productPhoto  String?
  isDeleted     Boolean       @default(false)
  publish       Boolean       @default(false)
  paymentStatus PaymentStatus @default(FREE)
  price         Float?
  reviewStatus  ReviewStatus  @default(UNDER_REVIEW)
  isPaid        Boolean       @default(false)
  user          User          @relation(fields: [authorId], references: [id])
  category      Category      @relation(fields: [categoryId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  votes         Vote[]
  comments      Comment[]
  payments      Payment[]
  orderIdeas    OrderIdeas[]

  @@map("ideas")
}

model Order {
  id         String       @id @default(uuid())
  userId     String
  totalPrice Float
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  orderIdeas OrderIdeas[]

  @@map("orders")
}

model OrderIdeas {
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id])

  @@id([orderId, ideaId])
  @@map("order_ideas")
}

model Comment {
  id        String  @id @default(uuid())
  content   String
  isDeleted Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String

  idea   Idea   @relation(fields: [ideaId], references: [id])
  ideaId String

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId String?
  replies  Comment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Vote {
  id        String   @id @default(uuid())
  voteType  VoteType
  userId    String
  ideaId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  idea Idea @relation(fields: [ideaId], references: [id])

  @@unique([userId, ideaId])
  @@map("votes")
}

model Payment {
  id                 String        @id @default(uuid())
  amount             Float
  status             PaymentStatus
  paymentGatewayData Json?
  transactionId      String
  user               User          @relation(fields: [userId], references: [id])
  userId             String
  orderId            String

  ideaId    String
  idea      Idea     @relation(fields: [ideaId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

enum OrderStatus {
  PENDING
  FAILED
  DELIVERED
}

enum PaymentStatus {
  PAID
  FREE
}

enum VoteType {
  UP
  DOWN
}

enum UserRole {
  USER
  SUPER_ADMIN
  ADMIN
  MEMBER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum ReviewStatus {
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum CategoryStatus {
  WASTE
  TRANSPORTATION
  ENERGY
}
